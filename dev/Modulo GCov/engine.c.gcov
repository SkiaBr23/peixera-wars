        -:    0:Source:engine.c
        -:    0:Programs:4
        -:    1:/*! \file engine.c
        -:    2:	\brief Módulo de implementação do módulo engine.h */
        -:    3:
        -:    4:/*
        -:    5:PROJETO
        -:    6:Nome: MAXIMILLIAN FAN XAVIER, OTÁVIO ALVES DIAS, RAFAEL DIAS DA COSTA, TÚLIO ABNER DE LIMA
        -:    7:Matrícula: 12/0153271, 12/0131480, 12/0133253, 12/0137194
        -:    8:Curso: Engenharia de Computação
        -:    9:Disciplina: Métodos de Programação
        -:   10:Turma: A
        -:   11:Prof: Jan Mendonça
        -:   12:*/
        -:   13:
        -:   14:/*INCLUSÃO DE BIBLIOTECAS*/
        -:   15:#include <stdio.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <string.h>
        -:   18:#include <strings.h>
        -:   19:#include <time.h>
        -:   20:#include <unistd.h>
        -:   21:#include "estruturas.h"
        -:   22:#include "engine.h"
        -:   23:#include "grafico.h"
        -:   24:
        -:   25:/*DEFINIÇÃO DE CONSTANTES*/
        -:   26:#define HUDH 7
        -:   27:#define CASTLEW 40
        -:   28:#define ARRAY_SIZE(a) (sizeof(a) / sizeof(a[0]))
        -:   29:#define CTRLD 	4
        -:   30:
        -:   31:/*	--------------------FUNÇÕES DA ENGINE--------------------	*/
        -:   32:
        -:   33:/****************************************************************************/
        -:   34:/**
        -:   35:* \fn CriaEstruturas(CabecaGeral* Interface,int novawave,int valor)
        -:   36:*
        -:   37:* \brief Realiza a alocação das estruturas Castelo e CabecaPFilas e inicializa com valor NULL todas as estruturas internas de cada uma das
        -:   38:* estruturas alocadas anteriormente.
        -:   39:*
        -:   40:* @param Interface - ponteiro para a controladora (CabecaGeral*) do game.
        -:   41:* @param novawave - determina o valor inicial.
        -:   42:* @param valor - informa a quantidade de ouro
        -:   43:* 
        -:   44:* \return Retorna a cabeça da estrutura com todas as estruturas Castelo e CabecaPFilas alocadas com seus ponteiros internos apontando para NULL.
        -:   45:* 
        -:   46:* Assertiva de entrada
        -:   47:*
        -:   48:* A estrutura controladora precisa ter sido alocada.
        -:   49:***************************************************************************/
        -:   50:
        -:   51:/*
        -:   52:Função de criação das estruturas.
        -:   53:REQUISITO: Ter ponteiro de interface devidamente alocado e memória livre.
        -:   54:HIPÓTESE: A função deve criar todas as estruturas básicas e seus apontamentos.
        -:   55:ASSERTIVAS DE ENTRADA: A estrutura controladora precisa ter sido alocada, um valor de inteiro "novawave" que assume valores de 1 ou 0 onde verifica se o jogo é novo ou carregado e um valor int do ouro carregado.
        -:   56:ASSERTIVAS DE SAÍDA: Não há.
        -:   57:INTERFACE EXPLÍCITA: O tipo de retorno void e o parâmetro de entrada CabecaGeral* Interface.
        -:   58:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:   59:*/
        3:   60:void CriaEstruturas(CabecaGeral* Interface,int novawave,int valor){
        3:   61:	if(Interface!=NULL){
        -:   62:		/*CRIAÇÃO DAS CABEÇAS*/
        3:   63:		Interface->character = CriaCabecaPFilas();
        3:   64:		Interface->castle = CriaCastelo(novawave,valor);
        -:   65:	
        -:   66:		/*CRIAÇÃO DAS LISTAS DE UNIDADES*/
        3:   67:		Interface->character->player = CriaUnidade();
        3:   68:		Interface->character->cpu = CriaUnidade();
        -:   69:		
        -:   70:		/*CRIAÇÃO DOS EDIFÍCIOS*/
        3:   71:		Interface->castle->quartel = CriaEdificio();
        3:   72:		Interface->castle->campodetiro = CriaEdificio();	
        3:   73:		Interface->castle->casadaslancas = CriaEdificio();
        3:   74:		Interface->castle->comercio = CriaComercio();	
        -:   75:	}
        3:   76:}
        -:   77:
        -:   78:/****************************************************************************/
        -:   79:/**
        -:   80:* \fn void InicializaEstruturas(CabecaGeral* Interface,int status,int cuQ,int nQ,int cuCDT,int nCDT,int cuCDL,int nCDL,int tC,int nC)
        -:   81:* 
        -:   82:* \brief Aloca as estruturas internas de Castelo e CabecaPFilas.
        -:   83:*
        -:   84:* @param Interface - ponteiro para a controladora do game (CabecaGeral*)
        -:   85:* @param status - valor inteiro que indica se as estruturas serão alocadas com os valores iniciais do game ou a partir de um valor específico
        -:   86:* @param cuQ - valor inteiro que representa o custo para a criação de um personagem do edifício Quartel
        -:   87:* @param nQ - valor inteiro que representa o nível do edifício quartel
        -:   88:* @param cuCDT - valor inteiro que representa o custo para a criação de um personagem do edifício Campo de Tiro
        -:   89:* @param nCDT - valor inteiro que representa o nível do edifício Campo de Tiro
        -:   90:* @param cuCDL - valor inteiro que representa o custo para a criação de um personagem do edifício Cada das Lanças
        -:   91:* @param nCDL - valor inteiro que representa o nível do edifício Casa das Lanças
        -:   92:* @param tC - valor inteiro que representa a quantidade de recursos gerados pelo edifício Comercio
        -:   93:* @param nC - valor inteiro que representa o nível do edifício Comercio
        -:   94:* 
        -:   95:* \return void - não possui retorno.
        -:   96:* 
        -:   97:* Assertiva de entrada
        -:   98:*
        -:   99:* A estrutura controladora enviada para a função precisa ter sido alocada
        -:  100:* A variavel status precisa obedecer os padrões, ser o valor inteiro 0 ou o valor inteiro 1
        -:  101:* Os valores das variáveis de inicialização precisam de acordo com o game.
        -:  102:***************************************************************************/
        -:  103:
        -:  104:/*
        -:  105:Função de inicialização das estruturas.
        -:  106:REQUISITO: Ter ponteiros de interface,castelo e filas devidamente alocados.
        -:  107:HIPÓTESE: A função deve atribuir valores iniciais para um jogo prestes a ser inicializado caso o status seja 0, se status é 1, atribui os valores enviados como parâmetro.
        -:  108:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido alocada. A variavel status precisa obedecer os padrões, ser o valor inteiro 0 ou o valor inteiro 1. Os valores das variáveis de inicialização precisam estar de acordo com o game.
        -:  109:ASSERTIVAS DE SAÍDA: Não há.
        -:  110:INTERFACE EXPLÍCITA: O tipo de retorno void e os  de entrada.
        -:  111:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  112:*/
        3:  113:void InicializaEstruturas(CabecaGeral* Interface,int status,int cuQ,int nQ,int cuCDT,int nCDT,int cuCDL,int nCDL,int tC,int nC){
        3:  114:	if(Interface!=NULL){	/*verifica se a interface é nula*/
        3:  115:		if(status == 0){	/*se o jogo for inicializado, atribui os valores iniciais*/
        2:  116:			Interface->castle->quartel = InicializarEdificio(Interface->castle->quartel,25,1);
        2:  117:			Interface->castle->campodetiro = InicializarEdificio(Interface->castle->campodetiro,25,1);
        2:  118:			Interface->castle->casadaslancas = InicializarEdificio(Interface->castle->casadaslancas,25,1);
        2:  119:			Interface->castle->comercio = InicializarComercio(Interface->castle->comercio,100,1);
        -:  120:		}
        3:  121:		if(status == 1){/*se o jogo foi carregado, atribui os valores lidos do arquivo binário*/
        1:  122:			if((nQ>0 && nQ<=3) && (nCDT>0 && nCDT<=3) && (nCDL>0 && nCDL<=3) && (nC>0 && nC<=3)){
        1:  123:				Interface->castle->quartel = InicializarEdificio(Interface->castle->quartel,cuQ,nQ);
        1:  124:				Interface->castle->campodetiro = InicializarEdificio(Interface->castle->campodetiro,cuCDT,nCDT);
        1:  125:				Interface->castle->casadaslancas = InicializarEdificio(Interface->castle->casadaslancas,cuCDL,nCDL);
        1:  126:				Interface->castle->comercio = InicializarComercio(Interface->castle->comercio,tC,nC);
        -:  127:			}
        -:  128:		}
        -:  129:	}
        3:  130:}
        -:  131:
        -:  132:/****************************************************************************/
        -:  133:/**
        -:  134:* \fn VerificaInterface(CabecaGeral* Interface)
        -:  135:* 
        -:  136:* \brief Verifica se a estrutura controladora está alocada ou não.
        -:  137:*
        -:  138:* @param Interface - ponteiro para a controladora (CabecaGeral*) do game.
        -:  139:* 
        -:  140:* \return Retorna o valor inteiro 1 caso a estrutura esteja alocada, caso contrário retorna 0.
        -:  141:* 
        -:  142:* Assertiva de entrada
        -:  143:*
        -:  144:* A estrutura controladora enviada para a função precisa ter sido declarada.
        -:  145:***************************************************************************/
        -:  146:
        -:  147:/*
        -:  148:Função verificação das estruturas.
        -:  149:REQUISITO: Ter ponteiro de interface devidamente alocado.
        -:  150:HIPÓTESE: A função deve verificar se a interface foi inicializada corretamente. Caso esteja tudo bem, retorna 1, caso contrário, retorna 0.
        -:  151:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido declarada.
        -:  152:ASSERTIVAS DE SAÍDA: Se nenhuma das estruturas for nula, retorna 1, caso contrário, retorna 0.
        -:  153:INTERFACE EXPLÍCITA: O retorno int e o parâmetro de entrada CabecaGeral* Interface.
        -:  154:INTERFACE IMPLÍCITA: A verificação de retorno 1 ou 0.
        -:  155:*/
        3:  156:int VerificaInterface(CabecaGeral* Interface){
        3:  157:	if((VerificarCabecaGeral(Interface)) && (VerificarCastelo(Interface->castle))){
        3:  158:		return 1;
        -:  159:	}else{
    #####:  160:		return 0;
        -:  161:	}
        -:  162:}
        -:  163:
        -:  164:/****************************************************************************/
        -:  165:/**
        -:  166:* \fn Inicia()
        -:  167:*
        -:  168:* \brief Executa a exibição do menu principal para o jogador iniciar, carregar, visualizar os créditos ou sair do jogo.
        -:  169:*
        -:  170:* \return void - não possui retorno.
        -:  171:* 
        -:  172:* Assertiva de entrada
        -:  173:*
        -:  174:* Não possui assertivas de entrada.
        -:  175:***************************************************************************/
        -:  176:
        -:  177:/*
        -:  178:Função de interface com o usuário.
        -:  179:REQUISITO: Não há.
        -:  180:HIPÓTESE: A função deve mostrar um menu de seleção inicial para o jogador.
        -:  181:ASSERTIVAS DE ENTRADA: Não possui.
        -:  182:ASSERTIVAS DE SAÍDA: Dependendo da escola do usuário, uma ação diferente é executada dentro do menu.
        -:  183:INTERFACE EXPLÍCITA: O tipo de retorno void.
        -:  184:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  185:*/
        8:  186:void Inicia(){
        8:  187:	WINDOW *menuwin = newwin(5, 15, 11, 40);
        8:  188:	int opcao = menu(menuwin);
        -:  189:
        8:  190:	switch(opcao){
        -:  191:		case 0:
        2:  192:			StartGame(NULL, 1);
    #####:  193:			break;
        -:  194:			
        -:  195:		case 1:
        5:  196:			LoadGame();
        4:  197:			Inicia();
    #####:  198:			break;
        -:  199:			
        -:  200:		case 2:
        1:  201:			creditos(15, 1);
        1:  202:			Inicia();
    #####:  203:			break;
        -:  204:		case 3:
    #####:  205:			tela_final();
    #####:  206:			break;
        -:  207:		
        -:  208:		default:
    #####:  209:			Inicia();
        -:  210:	}
    #####:  211:}
        -:  212:
        -:  213:/****************************************************************************/
        -:  214:/**
        -:  215:* \fn StartGame(CabecaGeral* Cabeca, int horda)
        -:  216:* 
        -:  217:* \brief Realiza a chamada para o começo do jogo, verificando se o jogo está sendo iniciado do começo ou a partir de algum save.
        -:  218:*
        -:  219:* @param Cabeca - ponteiro para a controladora (CabecaGeral*) do game.
        -:  220:* @param horda - valor inteiro que representa a horda de inimigos da cpu, caso seja utilizada a função de Load Game.
        -:  221:* 
        -:  222:* \return void - não possui retorno.
        -:  223:* 
        -:  224:* Assertiva de entrada
        -:  225:*
        -:  226:* A estrutura controladora enviada para a função precisa ter sido declarada
        -:  227:* A variavel horda precisa estar de acordo com os valores do jogo, ou seja, estar entre 1 e 10.
        -:  228:***************************************************************************/
        -:  229:
        -:  230:/*
        -:  231:Função de inicio do jogo.
        -:  232:REQUISITO: Ter espaço na memória.
        -:  233:HIPÓTESE: A função deve chamar todas as funções de criação e inicialização, verificar suas alocações e apontamentos e certificar-se que o jogo está pronto para começar.
        -:  234:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido declarada. A variavel horda precisa estar de acordo com os valores do jogo, ou seja, estar entre 1 e 10.
        -:  235:ASSERTIVAS DE SAÍDA: Se todas as estruturas forem corretamente verificadas, o jogo é iniciado, caso contrário, nada acontece.
        -:  236:INTERFACE EXPLÍCITA: O tipo de retorno void e os  de entrada CabecaGeral* Cabeca, int horda.
        -:  237:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  238:*/
        3:  239:void StartGame(CabecaGeral* Cabeca, int horda){
        3:  240:	int new = 1;
        3:  241:	CabecaGeral* Interface = CriaCabecaGeral();
        -:  242:
        3:  243:	if(Cabeca == NULL){
        2:  244:		CriaEstruturas(Interface,1,100);
        2:  245:		InicializaEstruturas(Interface,0,25,1,25,1,25,1,100,1);
        2:  246:		new = 1;
        -:  247:	}else{
        1:  248:		Interface = Cabeca;
        1:  249:		new = 0;
        -:  250:	}
        -:  251:	
        -:  252:	/*VERIFICAÇÃO DA INTERFACE*/
        3:  253:	if(VerificaInterface(Interface)){
        3:  254:		Run(Interface,new,horda);
        -:  255:	}
    #####:  256:}
        -:  257:
        -:  258:/****************************************************************************/
        -:  259:/**
        -:  260:* \fn SaveGame(CabecaGeral* Interface, int horda)
        -:  261:*
        -:  262:* \brief Realiza a gravação dos  do game em um arquivo  binário para posterior leitura e continuação do jogo.
        -:  263:*
        -:  264:* @param Interface - ponteiro para a controladora (CabecaGeral*) do game.
        -:  265:* @param horda - valor inteiro que representa a horda atual de inimigos do jogo.
        -:  266:* 
        -:  267:* \return void - não possui retorno.
        -:  268:* 
        -:  269:* Assertiva de entrada
        -:  270:*
        -:  271:* A estrutura controladora enviada para a função precisa ter sido declarada e alocada.
        -:  272:* A variavel horda precisa estar de acordo com os padrões do jogo, ou seja, estar entre 1 e 10.
        -:  273:***************************************************************************/
        -:  274:
        -:  275:/*
        -:  276:Função de salvar o jogo.
        -:  277:REQUISITO: Ter ponteiro de interface devidamente alocado e o jogo inicializado.
        -:  278:HIPÓTESE: A função deve gravar as informações de atributos dos edifícios e em que horda o jogador se encontra num arquivo binário.
        -:  279:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido declarada e alocada. A variavel horda precisa estar de acordo com os padrões do jogo, ou seja, estar entre 1 e 10.
        -:  280:ASSERTIVAS DE SAÍDA: Não há.
        -:  281:INTERFACE EXPLÍCITA: O tipo de retorno void, os  de entrada CabecaGeral* Cabeca, int horda e mensagem exibida ao usuário.
        -:  282:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  283:*/
       10:  284:void SaveGame(CabecaGeral* Interface, int horda){
        -:  285:	FILE* fp1;
       10:  286:	char saida[9] = "save.bin";
        -:  287:	
       10:  288:	fp1 = fopen(saida,"w+b");
        -:  289:	
       10:  290:	if((horda>0 && horda<=10) && (!CabecaGeralVazia(Interface))){
        9:  291:		fwrite(&Interface->castle->ouro,sizeof(int),1,fp1);
        9:  292:		fwrite(&Interface->castle->quartel->custounidade,sizeof(int),1,fp1);
        9:  293:		fwrite(&Interface->castle->quartel->nivel,sizeof(int),1,fp1);
        9:  294:		fwrite(&Interface->castle->campodetiro->custounidade,sizeof(int),1,fp1);
        9:  295:		fwrite(&Interface->castle->campodetiro->nivel,sizeof(int),1,fp1);
        9:  296:		fwrite(&Interface->castle->casadaslancas->custounidade,sizeof(int),1,fp1);
        9:  297:		fwrite(&Interface->castle->casadaslancas->nivel,sizeof(int),1,fp1);
        9:  298:		fwrite(&Interface->castle->comercio->taxaouro,sizeof(int),1,fp1);
        9:  299:		fwrite(&Interface->castle->comercio->nivel,sizeof(int),1,fp1);
        9:  300:		fwrite(&horda,sizeof(int),1,fp1);
        9:  301:		mensagem(17, 40, "Jogo salvo com sucesso");
        -:  302:	}
       10:  303:	fclose(fp1);
       10:  304:}
        -:  305:
        -:  306:/****************************************************************************/
        -:  307:/**
        -:  308:* \fn void LoadGame()
        -:  309:* 
        -:  310:* \brief Realiza a leitura do arquivo binário gerado pela função Save Game e continua com o jogo.
        -:  311:*
        -:  312:* Não possui .
        -:  313:* 
        -:  314:* \return void - não possui retorno.
        -:  315:* 
        -:  316:* Assertiva de entrada
        -:  317:*
        -:  318:* O arquivo binário a ser lido precisa ser válido, ou seja, ter sido gerado pelo game.
        -:  319:***************************************************************************/
        -:  320:
        -:  321:/*
        -:  322:Função de carregar um jogo salvo.
        -:  323:REQUISITO: Ter um arquivo binário a ser lido e memória livre para alocação.
        -:  324:HIPÓTESE: A função deve ler as informações de um arquivo bináro e atribuir os valores nos devidos ponteiros de edificios e informações no geral.
        -:  325:ASSERTIVAS DE ENTRADA: O arquivo binário a ser lido precisa ser válido, ou seja, ter sido gerado pelo game.
        -:  326:ASSERTIVAS DE SAÍDA: Não há.
        -:  327:INTERFACE EXPLÍCITA: O tipo de retorno void.
        -:  328:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  329:*/
        5:  330:void LoadGame(){
        -:  331:	FILE* fp1;
        5:  332:	char entrada[9] = "save.bin";
        -:  333:	int ouro,cuQ,nQ,cuCDT,nCDT,cuCDL,nCDL,tC,nC,horda;
        5:  334:	CabecaGeral* Interface = CriaCabecaGeral();
        -:  335:
        5:  336:	fp1 = fopen(entrada,"r+b");
        5:  337:	if(fp1 != NULL){
        1:  338:		fread(&ouro,sizeof(int),1,fp1);
        1:  339:		fread(&cuQ,sizeof(int),1,fp1);
        1:  340:		fread(&nQ,sizeof(int),1,fp1);
        1:  341:		fread(&cuCDT,sizeof(int),1,fp1);
        1:  342:		fread(&nCDT,sizeof(int),1,fp1);
        1:  343:		fread(&cuCDL,sizeof(int),1,fp1);
        1:  344:		fread(&nCDL,sizeof(int),1,fp1);
        1:  345:		fread(&tC,sizeof(int),1,fp1);
        1:  346:		fread(&nC,sizeof(int),1,fp1);
        1:  347:		fread(&horda,sizeof(int),1,fp1);
        -:  348:	
        1:  349:	fclose(fp1);
        -:  350:	
        1:  351:	CriaEstruturas(Interface,0,ouro);
        1:  352:	InicializaEstruturas(Interface,1,cuQ,nQ,cuCDT,nCDT,cuCDL,nCDL,tC,nC);
        1:  353:	StartGame(Interface,horda);
        -:  354:	}
        4:  355:}
        -:  356:
        -:  357:/****************************************************************************/
        -:  358:/**
        -:  359:* \fn int MenuEvolucaoEdificio(CabecaGeral* Interface)
        -:  360:* 
        -:  361:* \brief Realiza a evolução de um dos edifícios do jogo.
        -:  362:*
        -:  363:* @param Interface - ponteiro para a controladora (CabecaGeral*) do game.
        -:  364:* 
        -:  365:* \return EvoluiuEdificio - valor inteiro que indica se foi realizada a evolução de um dos edifícios.
        -:  366:* 
        -:  367:* Assertiva de entrada
        -:  368:*
        -:  369:* A estrutura controladora enviada para a função precisa ter sido declarada e alocada.
        -:  370:***************************************************************************/
        -:  371:
        -:  372:/*
        -:  373:Função que evolui um edifício do jogo.
        -:  374:REQUISITO: Ponteiro de CabecaGeral alocado e inicializado.
        -:  375:HIPÓTESE: A função deve evoluir um determinado edificio e enviar um inteiro, indicando que a evolução foi efetuada.
        -:  376:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido declarada e alocada.
        -:  377:ASSERTIVAS DE SAÍDA: Dependendo do case que entre, efetua uma evolução diferente e retorna uma flag indicando que evoluiu um edificio.
        -:  378:INTERFACE EXPLÍCITA: O tipo de retorno int, o parâmetro de entrada CabecaGeral* Interface e as mensagens exibidas ao usuário.
        -:  379:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  380:*/
        9:  381:int MenuEvolucaoEdificio(CabecaGeral* Interface){
        9:  382:	int OpcaoEdificio = menu_edificio();
        9:  383:	int EvoluiuEdificio = 0;
        9:  384:	switch(OpcaoEdificio){
        -:  385:		case 1:
        2:  386:			if(Interface->castle->quartel->nivel < 3){
        2:  387:				Interface->castle->quartel->nivel++;
        2:  388:				Interface->castle->quartel->custounidade +=35;
        2:  389:				EvoluiuEdificio=1;
        -:  390:			}
        -:  391:			else
        -:  392:			{
    #####:  393:				mensagem(21, 62, "Edificio no nivel maximo.");
        -:  394:			}
        2:  395:			break;
        -:  396:				
        -:  397:		case 2:
        3:  398:			if(Interface->castle->campodetiro->nivel < 3){
        2:  399:				Interface->castle->campodetiro->nivel++;
        2:  400:				Interface->castle->campodetiro->custounidade +=35;
        2:  401:				EvoluiuEdificio=1;
        -:  402:			}
        -:  403:			else
        -:  404:			{
        1:  405:				mensagem(21, 62, "Edificio no nivel maximo.");
        -:  406:			}
        3:  407:			break;
        -:  408:
        -:  409:			case 3:
        2:  410:			if(Interface->castle->casadaslancas->nivel < 3){
        2:  411:				Interface->castle->casadaslancas->nivel++;
        2:  412:				Interface->castle->casadaslancas->custounidade +=35;
        2:  413:				EvoluiuEdificio=1;
        -:  414:			}
        -:  415:			else
        -:  416:			{
    #####:  417:				mensagem(21, 62, "Edificio no nivel maximo.");
        -:  418:			}
        2:  419:			break;
        -:  420:						
        -:  421:		case 4:
        2:  422:			if(Interface->castle->comercio->nivel < 3){
        2:  423:				Interface->castle->comercio->nivel++;
        2:  424:				Interface->castle->comercio->taxaouro +=100;
        2:  425:				EvoluiuEdificio=1;
        -:  426:			}
        -:  427:			else
        -:  428:			{
    #####:  429:				mensagem(21, 62, "Edificio no nivel maximo.");
        -:  430:			}
        2:  431:			break;
        -:  432:						
        -:  433:		default:
    #####:  434:			MenuEvolucaoEdificio(Interface);
        -:  435:	}
        -:  436:	
        9:  437:	return EvoluiuEdificio;
        -:  438:}
        -:  439:
        -:  440:/****************************************************************************/
        -:  441:/**
        -:  442:* \fn MenuEscolhaUnidade(CabecaGeral* Interface)
        -:  443:* 
        -:  444:* \brief Realiza a escolha do personagem a ser criado no jogo.
        -:  445:*
        -:  446:* @param Interface - ponteiro para a controladora (CabecaGeral*) do game.
        -:  447:* 
        -:  448:* \return Retorna o valor inteiro 1 caso um dos personagens tenha sido criado, ou 0 caso nenhum tenha sido criado.
        -:  449:* 
        -:  450:* Assertiva de entrada
        -:  451:*
        -:  452:* A estrutura controladora enviada para a função precisa ter sido declarada e alocada.
        -:  453:***************************************************************************/
        -:  454:
        -:  455:/*
        -:  456:Função que insere unidades no jogo.
        -:  457:REQUISITO: Ponteiro de CabecaGeral alocado e inicializado.
        -:  458:HIPÓTESE: A função deve inserir até quatro unidades e enviar um inteiro, indicando que a inserção foi efetuada.
        -:  459:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido declarada e alocada.
        -:  460:ASSERTIVAS DE SAÍDA: Dependendo do case que entre, efetua uma criação diferente e retorna uma flag indicando que comprou uma unidade.
        -:  461:INTERFACE EXPLÍCITA: O tipo de retorno int, o parâmetro de entrada CabecaGeral* Interface e as mensagens exibidas ao usuário.
        -:  462:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  463:*/
       48:  464:int MenuEscolhaUnidade(CabecaGeral* Interface){			
       48:  465:	int OpcaoUnidade = menu_unidade(Interface->castle);
        -:  466:	
       48:  467:	switch(OpcaoUnidade){
        -:  468:		case 1:
        4:  469:			if(Interface->castle->quartel->nivel == 1){
        4:  470:				if(Interface->castle->ouro >= Interface->castle->quartel->custounidade){
        4:  471:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,300,60,0.15,1,1);
        4:  472:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->quartel->custounidade));
        4:  473:					mvprintw(2, 80, "            ");
        4:  474:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
        4:  475:					refresh(); 
        -:  476:				}else{
    #####:  477:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  478:					return 1;
        -:  479:				}
        -:  480:			}
        4:  481:			if(Interface->castle->quartel->nivel == 2){
    #####:  482:				if(Interface->castle->ouro >= Interface->castle->quartel->custounidade){
    #####:  483:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,400,60,0.15,2,1);				
    #####:  484:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->quartel->custounidade));
    #####:  485:					mvprintw(2, 80, "            ");
    #####:  486:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
    #####:  487:					refresh();
        -:  488:				}else{
    #####:  489:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  490:					return 1;
        -:  491:				}
        -:  492:			}
        4:  493:			if(Interface->castle->quartel->nivel == 3){
    #####:  494:				if(Interface->castle->ouro >= Interface->castle->quartel->custounidade){
    #####:  495:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,500,60,0.15,3,1);				
    #####:  496:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->quartel->custounidade));
    #####:  497:					mvprintw(2, 80, "            ");
    #####:  498:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
    #####:  499:					refresh();
        -:  500:				}else{
    #####:  501:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  502:					return 1;
        -:  503:				}
        -:  504:			}
        -:  505:
        4:  506:			break;
        -:  507:
        -:  508:		case 2:
    #####:  509:			if(Interface->castle->campodetiro->nivel == 1){
    #####:  510:				if(Interface->castle->ouro >= Interface->castle->campodetiro->custounidade){
    #####:  511:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,280,70,0.15,1,2);				
    #####:  512:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->campodetiro->custounidade));
    #####:  513:					mvprintw(2, 80, "            ");
    #####:  514:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
    #####:  515:					refresh();
        -:  516:				}else{
    #####:  517:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  518:					return 1;
        -:  519:				}
        -:  520:			}
    #####:  521:			if(Interface->castle->campodetiro->nivel == 2){
    #####:  522:				if(Interface->castle->ouro >= Interface->castle->campodetiro->custounidade){
    #####:  523:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,280,90,0.15,2,2);				
    #####:  524:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->campodetiro->custounidade));
    #####:  525:					mvprintw(2, 80, "            ");
    #####:  526:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
    #####:  527:					refresh();
        -:  528:				}else{
    #####:  529:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  530:					return 1;
        -:  531:				}
        -:  532:			}
    #####:  533:			if(Interface->castle->campodetiro->nivel == 3){
    #####:  534:				if(Interface->castle->ouro >= Interface->castle->campodetiro->custounidade){
    #####:  535:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,280,120,0.15,3,2);				
    #####:  536:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->campodetiro->custounidade));
    #####:  537:					mvprintw(2, 80, "            ");
    #####:  538:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
    #####:  539:					refresh();
        -:  540:				}else{
    #####:  541:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  542:					return 1;
        -:  543:				}
        -:  544:			}
    #####:  545:			break;
        -:  546:
        -:  547:		case 3:
       44:  548:			if(Interface->castle->casadaslancas->nivel == 1){
       24:  549:				if(Interface->castle->ouro >= Interface->castle->casadaslancas->custounidade){
       24:  550:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,280,800,0.2,1,3);				
       24:  551:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->casadaslancas->custounidade));
       24:  552:					mvprintw(2, 80, "            ");
       24:  553:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
       24:  554:					refresh();
        -:  555:				}else{
    #####:  556:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  557:					return 1;
        -:  558:				}
        -:  559:			}
       44:  560:			if(Interface->castle->casadaslancas->nivel == 2){
       12:  561:				if(Interface->castle->ouro >= Interface->castle->casadaslancas->custounidade){
       12:  562:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,280,800,0.3,2,3);				
       12:  563:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->casadaslancas->custounidade));
       12:  564:					mvprintw(2, 80, "            ");
       12:  565:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
       12:  566:					refresh();
        -:  567:				}else{
    #####:  568:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  569:					return 1;
        -:  570:				}
        -:  571:			}
       44:  572:			if(Interface->castle->casadaslancas->nivel == 3){
        8:  573:				if(Interface->castle->ouro >= Interface->castle->casadaslancas->custounidade){
        8:  574:					Interface->character->player = InserirUnidadeFinal(Interface->character->player,280,800,0.4,3,3);				
        8:  575:					Interface->castle = AtualizarCasteloOuro(Interface->castle,(-Interface->castle->casadaslancas->custounidade));
        8:  576:					mvprintw(2, 80, "            ");
        8:  577:					mvprintw(2, 80, "Gold$ %d", Interface->castle->ouro);
        8:  578:					refresh();
        -:  579:				}else{
    #####:  580:					mensagem(22, 62, "Nao ha ouro suficiente");
    #####:  581:					return 1;
        -:  582:				}
        -:  583:			}
       44:  584:			break;
        -:  585:
        -:  586:		default:
    #####:  587:		MenuEscolhaUnidade(Interface);
        -:  588:	}
       48:  589:	return 0;
        -:  590:}
        -:  591:
        -:  592:/****************************************************************************/
        -:  593:/**
        -:  594:* \fn void Run (CabecaGeral* Interface, int new, int wave)
        -:  595:* 
        -:  596:* \brief Realiza a execução do loop principal do game, avançando as hordas de inimigos e executando as funções de criação e evolução de edifícios * e personagens.
        -:  597:*
        -:  598:* @param Interface - ponteiro para a controladora (CabecaGeral*) do game.
        -:  599:* @param new - valor inteiro que indica se o jogo está sendo iniciado do começo ou a partir de um save.
        -:  600:* @param wave - valor inteiro que representa a horda de inimigos caso seja executado o jogo a partir de um load.
        -:  601:* 
        -:  602:* \return void - não possui retorno.
        -:  603:* 
        -:  604:* Assertiva de entrada
        -:  605:*
        -:  606:* A estrutura controladora enviada para a função precisa ter sido declarada e alocada.
        -:  607:* As variáveis new e wave precisam estar de acordo com o jogo, ou seja, new precisa ser 0 ou 1 e wave precisa estar entre 1 e 10.
        -:  608:***************************************************************************/
        -:  609:
        -:  610:/*
        -:  611:Função que integra as demais funções do jogo.
        -:  612:REQUISITO: Memória livre para alocação, ponteiro de CabecaGeral alocado e inicializado.
        -:  613:HIPÓTESE: A função deve inicializar a interface gráfica e gerenciar os turnos de cada jogador.
        -:  614:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido declarada e alocada. As variáveis new e wave precisam estar de acordo com o jogo, ou seja, new precisa ser 0 ou 1 e wave precisa estar entre 1 e 10.
        -:  615:ASSERTIVAS DE SAÍDA: Não há.
        -:  616:INTERFACE EXPLÍCITA: O tipo de retorno void e os  de entrada CabecaGeral* Interface, int new, int wave.
        -:  617:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  618:*/
        3:  619:void Run (CabecaGeral* Interface, int new, int wave){
        3:  620:	int horda = 0;	/*diz em qual horda o jogador se encontra*/
        3:  621:	int fim = 0;	/*indica fim de jogo*/
        3:  622:	int newhorda = 1;	/*indica se é o início de uma nova horda*/
        3:  623:	int EvoluiuEdificio = 0;	/*indica se o jogador já evoluiu um de seus edifícios*/
        3:  624:	int TemDinheiro = 1;	/*indica se o jogador possui dinheiro suficiente para comprar unidades*/
        3:  625:	int mensagem = 0;
        -:  626:	int i;
        -:  627:
        3:  628:	WINDOW *winhud = newwin(HUDH,COLS, 0, 0);
        3:  629:	WINDOW *wincastle = newwin(LINES-HUDH, CASTLEW, HUDH,0);
        3:  630:	WINDOW *winfield = newwin(LINES-HUDH, COLS-CASTLEW, HUDH, CASTLEW);
        -:  631:	                        /* (height,width,starty,startx) */
        -:  632:	
        3:  633:	if(!CabecaGeralVazia(Interface)){
        3:  634:		if(new==1){	/*atribui o valor da horda. Caso seja um novo jogo, horda =1, caso seja um Load, horda = wave.*/
        2:  635:			horda = 1;
        -:  636:		}else{
        1:  637:			horda = wave;
        -:  638:		}
        3:  639:		print_hud(winhud,Interface->castle->ouro,horda);
        3:  640:		wrefresh(winhud);
        -:  641:
        3:  642:		print_field(winfield, Interface->character);
        3:  643:		wrefresh(winfield);
        -:  644:
        3:  645:		print_castle(wincastle, Interface->castle);
        3:  646:		wrefresh(wincastle);
        -:  647:
       16:  648:		while(fim==0 && (horda>0 && horda<=10)){	/*contagem de hordas*/
        -:  649:
       12:  650:			srand(time(NULL));
        -:  651:
       12:  652:			print_hud(winhud,Interface->castle->ouro,horda);
       12:  653:			wrefresh(winhud);
        -:  654:
       12:  655:			print_field(winfield, Interface->character);
       12:  656:			wrefresh(winfield);
        -:  657:
       12:  658:			print_castle(wincastle, Interface->castle);
       12:  659:			wrefresh(wincastle);
        -:  660:
       12:  661:			if(newhorda==1){	/*momento de pausa para o jogador fazer as evoluções e compras de unidades*/
       72:  662:				while((!TemQuatro(Interface->character->player)) && TemDinheiro==1){	/*limita a quantidade de unidades em jogo para até 4 e habilita a compra das mesmas*/
       48:  663:					mensagem = MenuEscolhaUnidade(Interface);
       48:  664:					if((Interface->castle->ouro < Interface->castle->quartel->custounidade) && (Interface->castle->ouro < Interface->castle->campodetiro->custounidade) && (Interface->castle->ouro < Interface->castle->casadaslancas->custounidade)) 
        -:  665:					{
        5:  666:						TemDinheiro = 0;
        -:  667:					}
       48:  668:					if (mensagem == 0)
        -:  669:					{
       48:  670:						print_field(winfield, Interface->character);
       48:  671:						wrefresh(winfield);
        -:  672:					}
        -:  673:				}
       57:  674:				for (i = 0; i < 4; i++)
        -:  675:				{
       45:  676:					if(horda == 10)
        -:  677:					{
        1:  678:						InsereUnidadeBoss(Interface);
        1:  679:						i = 4;
        -:  680:					}
        -:  681:					else
       44:  682:						InsereUnidadeInimiga(Interface,horda);
        -:  683:						
       45:  684:					usleep(400000);
       45:  685:					print_field(winfield, Interface->character);
       45:  686:					wrefresh(winfield);
        -:  687:				}
       12:  688:				newhorda = 0;
        -:  689:			}
        -:  690:
       12:  691:			fim = GameLoop (Interface, winfield);
        -:  692:			
       60:  693:			while(!UnidadeVazia(Interface->character->player)){				/*remove todas as unidades da lista de jogador */
       40:  694:				Interface->character->player = RemoverUnidadeFinal(Interface->character->player);
        -:  695:			} 
        -:  696:			
        -:  697:	
       10:  698:			if (fim == 0) {
       29:  699:				while(EvoluiuEdificio==0 && horda<9){	/*a partir da segunda horda já é possível fazer evoluções dos edifícios*/
        9:  700:					EvoluiuEdificio = MenuEvolucaoEdificio(Interface);
        -:  701:				}
       10:  702:				horda++;	/*avança para a próxima horda*/
       10:  703:				EvoluiuEdificio = 0;	/*dá um ponto de evolução para o jogador*/
       10:  704:				Interface->castle->ouro += Interface->castle->comercio->taxaouro;	/*credita o ouro*/
       10:  705:				newhorda = 1;
       10:  706:				TemDinheiro = 1;
       10:  707:				SaveGame(Interface, horda);
        -:  708:			} else {
    #####:  709:				TelaGameOver();
        -:  710:			}
        -:  711:		}
        1:  712:		tela_final();
        -:  713:	}
    #####:  714:}
        -:  715:
        -:  716:/****************************************************************************/
        -:  717:/**
        -:  718:* \fn int GameLoop (CabecaGeral * Interface, WINDOW * winfield)
        -:  719:* 
        -:  720:* \brief Realiza o loop de batalhas entre o player e o cpu no game.
        -:  721:*
        -:  722:*
        -:  723:* @param Interface - ponteiro para a controladora do game (CabecaGeral*)
        -:  724:* @param winfield - ponteiro para a estrutura WINDOW (estrutura da biblioteca ncurses) para realizar a visualização dos combates.
        -:  725:* 
        -:  726:* \return Retorna o valor inteiro 0 caso o player tenha vencido a batalha ou 1 caso o cpu tenha vencido a batalha.
        -:  727:* 
        -:  728:* Assertiva de entrada
        -:  729:*
        -:  730:* A estrutura controladora do game precisa ter sido declarada e alocada.
        -:  731:* A estrutura WINDOW precisa ter sido declarada e alocada para realizar a visualização.
        -:  732:***************************************************************************/
        -:  733:
        -:  734:/*
        -:  735:Função que realiza o combate por turnos entre player e cpu.
        -:  736:REQUISITO: Interface estar alocada com personagens de player e cpu devidamente alocados, juntamente com a estrutura WINDOW para visualização.
        -:  737:HIPÓTESE: Será indicado o vencedor ao final da função.
        -:  738:ASSERTIVAS DE ENTRADA:  A estrutura controladora do game precisa ter sido declarada e alocada. A estrutura WINDOW precisa ter sido declarada e alocada para realizar a visualização.
        -:  739:ASSERTIVAS DE SAÍDA: A vitória pode ser adquirida pelo player ou cpu, indicando continuação do game ou perda. 
        -:  740:INTERFACE EXPLÍCITA: Tipo de retorno int e os  de entrada CabecaGeral * Interface, WINDOW * winfield.
        -:  741:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  742:*/
       12:  743:int GameLoop (CabecaGeral * Interface, WINDOW * winfield) {
       12:  744:	int fluxo = 0;	
        -:  745:	int vencedor;
        -:  746:	
       41:  747:	while (fluxo == 0) {	
        -:  748:		/*Indica o período em que o player realiza o seu ataque*/
       19:  749:		fluxo = Batalha(Interface, winfield);
       17:  750:		if (fluxo == 0) {
        -:  751:			/*Indica o período em que a cpu realiza o seu ataque*/
        7:  752:			fluxo = Batalha2 (Interface, winfield);
        7:  753:			print_field(winfield, Interface->character);
        7:  754:			wrefresh(winfield);
        -:  755:		}
        -:  756:	}
       10:  757:	if (fluxo == 1) {
       10:  758:		vencedor = 0;
    #####:  759:	} else if (fluxo == 2) {
    #####:  760:		vencedor = 1;
        -:  761:	}
        -:  762:	
       10:  763:	return vencedor;
        -:  764:}
        -:  765:
        -:  766:/****************************************************************************/
        -:  767:/**
        -:  768:* \fn int Batalha(CabecaGeral *Interface, WINDOW *winfield)
        -:  769:* 
        -:  770:* \brief Realiza a seleção do inimigo a ser atacado pelo player, um ataque para cada um de seus personagens.
        -:  771:*
        -:  772:* @param Interface - ponteiro para a controladora do game (CabecaGeral*)
        -:  773:* @param winfield - ponteiro para a estrutura WINDOW (estrutura da biblioteca ncurses) para realizar a visualização do game.
        -:  774:* 
        -:  775:* \return Retorna o valor inteiro 1 caso o player tenha vencido a batalha ou 0 caso todos os ataques tenham sido realizados e ainda existem
        -:  776:* inimigos na cpu.
        -:  777:* 
        -:  778:* Assertiva de entrada
        -:  779:*
        -:  780:* A estrutura controladora do game precisa ter sido declarada e alocada.
        -:  781:* A estrutura WINDOW precisa ter sido declarada e alocada para correta visualização do game.
        -:  782:***************************************************************************/
        -:  783:
        -:  784:/*
        -:  785:Função responsável pela batalha entre o jogador e a cpu.
        -:  786:REQUISITO: É necessário que a controladora do game esteja alocada juntamente com a estrutura de visualização WINDOW e existam personagens da cpu.
        -:  787:HIPÓTESE: Será realizado o ataque nas unidades do computador, atualizando os personagens a cada ataque e indicando ao final do turno se ainda existem personagens vivos pela parte da cpu.ASSERTIVAS DE ENTRADA: A estrutura controladora do game precisa ter sido declarada e alocada. A estrutura WINDOW precisa ter sido declarada e alocada para correta visualização do game.
        -:  788:ASSERTIVAS DE SAÍDA: Se o jogador ganhar, deve ser retornado 1, caso contrário, o retorno é igual a 0.
        -:  789:INTERFACE EXPLÍCITA: O tipo de retorno int e os  de entrada CabecaGeral *Interface, WINDOW *winfield.
        -:  790:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  791:*/
       19:  792:int Batalha(CabecaGeral *Interface, WINDOW *winfield)
        -:  793:{
       19:  794:	int i = 1;
       19:  795:	int j = 1;
       19:  796:	char c = '\0';
        -:  797:	Unidade *player;
       19:  798:	Unidade *cpu= Interface->character->cpu;
        -:  799:
       60:  800:	for (player = Interface->character->player; player!=NULL; player = player->prox, cpu= Interface->character->cpu, i++)
        -:  801:	{
        -:  802:		
       53:  803:		seta_batalha(winfield, 2, i);
       53:  804:		seta_batalha(winfield, 1, 1);
        -:  805:
      149:  806:		while(c != 10)
        -:  807:		{       
       55:  808:			c = getch();
       55:  809:			switch(c)
        -:  810:	        {	
        -:  811:	        	case 'm':
        2:  812:	        		tela_inicial();
        -:  813:	        	case 's':
    #####:  814:	        		if (cpu->prox!=NULL)
        -:  815:	        		{
    #####:  816:	        			cpu = cpu->prox;
    #####:  817:	        			j++;
    #####:  818:	        			seta_batalha(winfield, 1, j);
    #####:  819:						wrefresh(winfield);
        -:  820:	        		}
    #####:  821:					break;
        -:  822:				case 'w':
    #####:  823:					if (cpu->ant!=NULL)
        -:  824:	        		{
    #####:  825:	        			cpu = cpu->ant;
    #####:  826:	        			j--;
    #####:  827:	        			seta_batalha(winfield, 1, j);
    #####:  828:						wrefresh(winfield);
        -:  829:	        		}
    #####:  830:					break;
        -:  831:				case 10:	/* Enter */
       51:  832:					Interface->character->cpu = Atacar(player, cpu);
       51:  833:					print_field(winfield, Interface->character);
       51:  834:					wrefresh(winfield);
       51:  835:					if (UnidadeVazia(Interface->character->cpu)) {
       10:  836:						return 1;
        -:  837:					}
       41:  838:					break;	
        -:  839:			}
        -:  840:		}
       41:  841:		c = '\0';
       41:  842:		seta_batalha(winfield, 0, 0);
       41:  843:		wrefresh(winfield);
       41:  844:		j = 1;
        -:  845:	}
        -:  846:
        7:  847:	return 0;
        -:  848:}
        -:  849:
        -:  850:/****************************************************************************/
        -:  851:/**
        -:  852:* \fn Unidade *Atacar(Unidade *atacante, Unidade *vitima)
        -:  853:* 
        -:  854:* \brief Realiza o ataque de um personagem do player sobre um dos personagens do cpu.
        -:  855:*
        -:  856:* @param atacante - ponteiro para o personagem do player (Unidade*) que vai realizar o ataque
        -:  857:* @param vitima - ponteiro para o personagem do cpu (Unidade*) que vai receber o ataque
        -:  858:* 
        -:  859:* \return Retorna a lista de personagen da cpu atualizada.
        -:  860:* 
        -:  861:* Assertiva de entrada
        -:  862:*
        -:  863:* As estruturas de personagens enviadas para a função precisam ter sido declaradas e alocadas.
        -:  864:***************************************************************************/
        -:  865:
        -:  866:/*
        -:  867:Função responsável pela realização do ataque 
        -:  868:REQUISITO: Ter ponteiros de atacante e vitima alocados.
        -:  869:HIPÓTESE: A função deve realizar o ataque à uma unidade e caso a vitima seja igual a zero, elimina seu nó da lista.
        -:  870:ASSERTIVAS DE ENTRADA: As estruturas de personagens enviadas para a função precisam ter sido declaradas e alocadas.
        -:  871:ASSERTIVAS DE SAÍDA: Não há.
        -:  872:INTERFACE EXPLÍCITA: O tipo de retorno Unidade* e os  de entrada Unidade *atacante, Unidade *vitima. As mensagens para o usuário.
        -:  873:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  874:*/
       51:  875:Unidade *Atacar(Unidade *atacante, Unidade *vitima)
        -:  876:{
        -:  877:	float esquiva;
        -:  878:	Unidade *aux;
        -:  879:	int dano;
       51:  880:	for (aux=vitima; aux->ant!=NULL; aux=aux->ant);
        -:  881:
       51:  882:	esquiva = (float)GerarValor(101, 0)/100;
        -:  883:
       51:  884:	if ((esquiva>vitima->esquiva))
        -:  885:	{
       38:  886:		dano = (atacante->dano + GerarValor(21, -10));
       38:  887:		vitima->vida -= dano;
       38:  888:		if(dano > atacante->dano + 10)
    #####:  889:		mensagem(20, 75, "Foi super efetivo!");
       38:  890:		else if(dano < atacante->dano - 5)
       11:  891:		mensagem(20,75,"Nao foi efetivo!");
        -:  892:		else
       27:  893:		mensagem(20,75,"Acertou o golpe!");
       38:  894:		sleep(1);
       38:  895:		if (vitima->vida<=0)
        -:  896:		{
       37:  897:			aux = RemoverUnidade(aux, vitima);
        -:  898:		}
        -:  899:	}
        -:  900:	else
        -:  901:	{
       13:  902:		mensagem(20, 75, "Errou o golpe!");
       13:  903:		sleep(1);
        -:  904:	}
       51:  905:	return aux;
        -:  906:}
        -:  907:
        -:  908:/****************************************************************************/
        -:  909:/**
        -:  910:* \fn int Batalha2(CabecaGeral *Interface, WINDOW *winfield)
        -:  911:*
        -:  912:* \brief Função que executa o loop de ataque da cpu contra os personagens do player.
        -:  913:*
        -:  914:* @param Interface - ponteiro para a controladora (CabecaGeral*) do game.
        -:  915:* @param winfield - ponteiro para WINDOW (parâmetro da biblioteca ncurses) para atualizar a janela de exibição do game.
        -:  916:* 
        -:  917:* \return Retorna o valor inteiro 0 caso todos os ataques tenham sido feitos e ainda existam personagens do player, ou 2 caso todos os personagens * do player tenham sido eliminados.
        -:  918:* 
        -:  919:* Assertiva de entrada
        -:  920:*
        -:  921:* A estrutura controladora enviada para a função precisa ter sido declarada e alocada.
        -:  922:* A estrutura WINDOW precisa ser válida para poder exibir corretamente o game na tela.
        -:  923:***************************************************************************/
        -:  924:
        -:  925:/*
        -:  926:Função que realiza o combate no turno da cpu.
        -:  927:REQUISITO: É necessário que a controladora do game esteja alocada juntamente com a estrutura de visualização WINDOW e existam personagens da cpu.
        -:  928:HIPÓTESE: Será realizado o ataque nas unidades do jogador, atualizando os personagens a cada ataque e indicando ao final do turno se ainda existem personagens vivos pela parte do player.
        -:  929:ASSERTIVAS DE ENTRADA: A estrutura controladora enviada para a função precisa ter sido declarada e alocada. A estrutura WINDOW precisa ser válida para poder exibir corretamente o game na tela.
        -:  930:ASSERTIVAS DE SAÍDA: Indicação sobre eliminação de todos os personagens ou não, atualização dos atributos dos personagens existentes.
        -:  931:INTERFACE EXPLÍCITA: Tipo de retorno int e  de entrada CabecaGeral *Interface, WINDOW *winfield. As mensagens de erro impressas a cada situação.
        -:  932:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -:  933:*/
        7:  934:int Batalha2(CabecaGeral *Interface, WINDOW *winfield)
        -:  935:{
        -:  936:	int hit;
        -:  937:	Unidade *cpu;
        7:  938:	mensagem(20, 60, "Prepare-se!");
        7:  939:	sleep(1);	
        7:  940:	print_field(winfield, Interface->character);
        7:  941:	wrefresh(winfield);
       15:  942:	for (cpu = Interface->character->cpu; cpu != NULL; cpu = cpu->prox) {
        8:  943:		Interface->character->player = AtaqueInimigo (&hit, cpu, Interface->character->player);
        8:  944:		if (UnidadeVazia(Interface->character->player)) {
    #####:  945:			return 2;
        -:  946:		}
        8:  947:		if (hit == 1) {
        7:  948:			mensagem(20, 60, "O inimigo conseguiu realizar o ataque!");
        7:  949:			sleep(1);
        7:  950:			print_field(winfield, Interface->character);
        7:  951:			wrefresh(winfield);
        7:  952:			if (cpu->prox != NULL) {
        1:  953:				mensagem(20,60, "Preparando ataque...");
        1:  954:				sleep(1);
        1:  955:				print_field(winfield, Interface->character);
        1:  956:				wrefresh(winfield);
        -:  957:			}
        -:  958:		}
        8:  959:		if (hit == 0) {
        1:  960:			mensagem(20, 65, "O inimigo fracassou no ataque!");
        1:  961:			sleep(1);
        1:  962:			print_field(winfield, Interface->character);
        1:  963:			wrefresh(winfield);
        1:  964:			if (cpu->prox != NULL) {
    #####:  965:				mensagem(20,60, "Preparando ataque...");
    #####:  966:				sleep(1);
    #####:  967:				print_field(winfield, Interface->character);
    #####:  968:				wrefresh(winfield);
        -:  969:			}
        -:  970:		}
        -:  971:	}
        -:  972:
        -:  973:
        7:  974:	return 0;
        -:  975:}
        -:  976:
        -:  977:/****************************************************************************/
        -:  978:/**
        -:  979:* \fn Unidade * buscaAlvo (Unidade * vitima)
        -:  980:* 
        -:  981:* \brief Realiza a busca pelo personagem mais fraco do player para que a cpu possa realizar o ataque.
        -:  982:*
        -:  983:* @param vitima - ponteiro para a lista de personagens do player (Unidade*).
        -:  984:*
        -:  985:* \return Retorna o ponteiro para o personagem (Unidade*) a ser atacado.
        -:  986:* 
        -:  987:* Assertiva de entrada
        -:  988:*
        -:  989:* A lista de personagens do player enviada para a função precisa ter sido declarada e alocada.
        -:  990:***************************************************************************/
        -:  991:
        -:  992:/*
        -:  993:Função que deve realizar a busca de um alvo a ser atacado.
        -:  994:REQUISITO: Ter um ponteiro de Unidade alocado.
        -:  995:HIPÓTESE: Será selecionado o alvo(nó) mais fraco(que contiver a menor vida) e o mesmo será retornado.
        -:  996:ASSERTIVAS DE ENTRADA: A lista de personagens do player enviada para a função precisa ter sido declarada e alocada.
        -:  997:ASSSERTIVAS DE SAÍDA: Nó a ser atacado deve ser diferente de nulo.
        -:  998:INTERFACE EXPLÍCITA: Tipo do retorno Unidade* e parâmetro de entrada Unidade* vitima.
        -:  999:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -: 1000:*/
        8: 1001:Unidade * buscaAlvo (Unidade * vitima) {
        -: 1002:	Unidade * p;
        8: 1003:	Unidade * alvo = NULL;
        8: 1004:	int vida = vitima->vida;
       40: 1005:	for (p = vitima; p != NULL; p = p->prox) {	/*percorre a lista em busca de um elemento com a menor vida*/
       32: 1006:		if (p->vida <= vida) {
       32: 1007:			alvo = p;
       32: 1008:			vida = p->vida;
        -: 1009:		}
        -: 1010:	}
        8: 1011:	return alvo;
        -: 1012:}
        -: 1013:
        -: 1014:/****************************************************************************/
        -: 1015:/**
        -: 1016:* \fn Unidade *AtaqueInimigo(int * hit, Unidade *atacante, Unidade *vitima)
        -: 1017:*
        -: 1018:* \brief Realiza o ataque de um personagem do cpu sobre um personagem do player.
        -: 1019:*
        -: 1020:* @param hit - ponteiro para um valor inteiro que vai indicar se foi realizado o ataque com eficiencia ou não
        -: 1021:* @param atacante - ponteiro para o personagem da cpu (Unidade*) que vai realizar o ataque
        -: 1022:* @param vitima - ponteiro para o personagem do player (Unidade*) que vai ser atacado
        -: 1023:* 
        -: 1024:* \return Retorna a lista de personagens do player atualizada após o ataque.
        -: 1025:* 
        -: 1026:* Assertiva de entrada
        -: 1027:*
        -: 1028:* A lista de personagens do player precisa ter sido declarada e alocada.
        -: 1029:* O personagem da cpu que vai realizar o ataque precisa estar alocado
        -: 1030:* O ponteiro para a variavel inteira precisa ter sido declarado.
        -: 1031:***************************************************************************/
        -: 1032:			
        -: 1033:/*
        -: 1034:Função que realiza o ataque da cpu.
        -: 1035:REQUISITO: É necessário que o atacante e a vítima sejam ponteiros alocados em memória.
        -: 1036:HIPÓTESE: O alvo selecionado(nó) terá seus atributos atualizados ao final da execução da função de ataque.
        -: 1037:ASSERTIVAS DE ENTRADA: A lista de personagens do player precisa ter sido declarada e alocada. O personagem da cpu que vai realizar o ataque precisa estar alocado. O ponteiro para a variavel inteira precisa ter sido declarado.
        -: 1038:ASSERTIVAS DE SAÍDA: Nó selecionado com atributos atualizados e valor inteiro que indica se ocorreu ou não o ataque.
        -: 1039:INTERFACE EXPLÍCITA: O tipo do retorno Unidade* e os  de entrada int * hit, Unidade *atacante, Unidade *vitima.
        -: 1040:INTERFACE IMPLÍTICITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -: 1041:*/
        8: 1042:Unidade *AtaqueInimigo(int * hit, Unidade *atacante, Unidade *vitima)
        -: 1043:{	/*declaração de variáveis*/
        -: 1044:	float esquiva;
        -: 1045:	int dano;
        8: 1046:	Unidade * vit = vitima;
        8: 1047:	Unidade * atac = atacante;
        -: 1048:	Unidade * alvo;
        -: 1049:
        8: 1050:	alvo = buscaAlvo (vit);	/*busca pelo alvo com menor vida*/
        8: 1051:	esquiva = (float)GerarValor(101, 0)/100;	/*gera um valor aleatório para as chances de acerto da unidade*/
        8: 1052:	if ((esquiva > alvo->esquiva)) {	/*se o valor estiver fora da margem de esquiva da unidade do jogador, então realiza o ataque*/
        7: 1053:		dano = (atac->dano + GerarValor(21, -10));
        7: 1054:		alvo->vida -= dano;
        7: 1055:		*hit = 1;
        7: 1056:		if (alvo->vida<=0) {
    #####: 1057:			vit = RemoverUnidade(vit, alvo);	/*se a vida da unidade do jogador for menor ou igual a zero, ela é removida da lista*/
        -: 1058:		}
        -: 1059:	} else {
        1: 1060:		*hit = 0;	/*caso contrário, atribui 0 ao ataque*/
        -: 1061:	}	
        8: 1062:	return vit;	/*retorna a vida atualizada*/
        -: 1063:}
        -: 1064:
        -: 1065:/****************************************************************************/
        -: 1066:/**
        -: 1067:* \fn TemQuatro(Unidade* lista)
        -: 1068:*
        -: 1069:* \brief Função para verificar se já existem 4 personagens na lista do player, para que ele possa escolher seus personagens.
        -: 1070:*
        -: 1071:* @param lista - ponteiro para a lista de personagens (Unidade*)
        -: 1072:*
        -: 1073:* \return Retorna o valor inteiro 1 caso já existam 4 personagens, ou 0 caso caso existam menos de 4.
        -: 1074:* 
        -: 1075:* Assertiva de entrada
        -: 1076:*
        -: 1077:* A lista de personagens do player precisa ter sido declarada e alocada.
        -: 1078:***************************************************************************/
        -: 1079:
        -: 1080:/*
        -: 1081:Função que que verifica se há quatro elementos em uma lista.
        -: 1082:REQUISITO: Ponteiro de Unidade alocado.
        -: 1083:HIPÓTESE: A função conta quantos elementos existem em uma lista de unidades e retorna 1 caso o somatório atinja o valor 4.
        -: 1084:ASSERTIVAS DE ENTRADA: A lista de personagens do player precisa ter sido declarada e alocada.
        -: 1085:ASSERTIVAS DE SAÍDA: Caso a lista não seja vazia, analise a quantidade de unidades alocadas e retorna 1 quando o valor chega a quatro, caso contrário, retorna 0.
        -: 1086:INTERFACE EXPLÍCITA: O tipo de retorno int e os parâmetro de entrada Unidade* lista.
        -: 1087:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -: 1088:*/
       60: 1089:int TemQuatro(Unidade* lista){
        -: 1090:	Unidade* p;	/*declaração de um ponteiro auxiliar*/
       60: 1091:	int i = 0;
        -: 1092:
       60: 1093:	if(!UnidadeVazia(lista)){	/*verifica se a lista é vazia*/
      156: 1094:		for(p=lista;p!=NULL;p=p->prox){	/*percorre a lista e soma a quantidade de elementos inseridos*/
      120: 1095:			i++;
      120: 1096:			if(i==4){
       12: 1097:				return 1; 	/*caso o número de unidades seja igual a 4, retorna 1*/
        -: 1098:			}
        -: 1099:		}
        -: 1100:	}
       48: 1101:	return 0;	/*caso o número de unidades não seja igual a 4, retorna 0*/
        -: 1102:}
        -: 1103:
        -: 1104:/****************************************************************************/
        -: 1105:/**
        -: 1106:* \fn int GerarValor(int a, int b)
        -: 1107:*
        -: 1108:* \brief Função que gera um valor aleatório entre 1 e 3 que vai indicar o tipo de personagem a ser criado pelo cpu.
        -: 1109:*
        -: 1110:* @param a - valor inteiro que indica o valor máximo entre os dois.
        -: 1111:* @param b - valor inteiro que indica o valor mínimo entre os dois.
        -: 1112:*
        -: 1113:* \return Retorna o valor inteiro, entre gerado pelo função rand.
        -: 1114:* 
        -: 1115:* Assertiva de entrada
        -: 1116:*
        -: 1117:* Os valores de a e b precisam ser valores inteiros.
        -: 1118:***************************************************************************/
        -: 1119:
        -: 1120:/*
        -: 1121:Função que que gera valores aleatórios entre 1 e 3.
        -: 1122:REQUISITO: Não há.
        -: 1123:HIPÓTESE: A função deve gerar valores aleatórios para classe das unidades inimigas.
        -: 1124:ASSERTIVAS DE ENTRADA: Os valores de a e b precisam ser valores inteiros.
        -: 1125:ASSERTIVAS DE SAÍDA: Não há.
        -: 1126:INTERFACE EXPLÍCITA: O tipo de retorno int e os  de entrada int a, int b.
        -: 1127:INTERFACE IMPLÍCITA: A geração do número aleatório atribuido para a variável valor.
        -: 1128:*/
        -: 1129:
      148: 1130:int GerarValor(int a, int b){
      148: 1131:	int valor = 0;	/*declaração de um valor inteiro*/
        -: 1132:
      148: 1133: 	valor = rand() % a+b; /*geração do valor aleatório a ser retornado*/
        -: 1134:
      148: 1135:return valor;
        -: 1136:}
        -: 1137:
        -: 1138:/****************************************************************************/
        -: 1139:/**
        -: 1140:* \fn void InsereUnidadeInimiga(CabecaGeral* Interface, int horda)
        -: 1141:* 
        -: 1142:* \brief Realiza a inserção de um personagem na lista de personagens do cpu, de acordo com os valores gerados para a classe e nível.
        -: 1143:*
        -: 1144:* @param Interface - ponteiro para a controladora do game (CabecaGeral*)
        -: 1145:* @param horda - valor inteiro que indica a horda de inimigos no jogo.
        -: 1146:* 
        -: 1147:* \return Retorna o valor inteiro 0 caso o player tenha vencido a batalha ou 1 caso o cpu tenha vencido a batalha.
        -: 1148:* 
        -: 1149:* Assertiva de entrada
        -: 1150:*
        -: 1151:* A estrutura controladora do game precisa ter sido declarada e alocada.
        -: 1152:* A variável horda precisa estar de acordo com os padroões do jogo, ou seja, ser um valor entre 1 e 10.
        -: 1153:***************************************************************************/
        -: 1154:
        -: 1155:/*
        -: 1156:Função que insere unidades inimigas no jogo.
        -: 1157:REQUISITO: Ponteiro de CabecaGeral alocado e inicializado.
        -: 1158:HIPÓTESE: A função deve inserir até quatro unidades inimigas com nível e classe de acordo com valores gerados aleatoriamente.
        -: 1159:ASSERTIVAS DE ENTRADA: A estrutura controladora do game precisa ter sido declarada e alocada. A variável horda precisa estar de acordo com os padroões do jogo, ou seja, ser um valor entre 1 e 10.
        -: 1160:ASSERTIVAS DE SAÍDA: Dependendo do case que entre, cria um tipo de unidade diferente.
        -: 1161:INTERFACE EXPLÍCITA: O tipo de retorno void e os  de entrada CabecaGeral* Interface, int horda.
        -: 1162:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -: 1163:*/
        -: 1164:
       44: 1165:void InsereUnidadeInimiga(CabecaGeral* Interface, int horda){   
       44: 1166: int OpcaoUnidade = GerarValor(3, 1);	/*Gera um valor aleatório para a classe das unidades*/
       44: 1167: int OpcaoNivel = GerarNivel(horda);	/*Gera um valor aleatório para o nível das unidades*/
        -: 1168:
        -: 1169:
       44: 1170:	switch(OpcaoUnidade){	/*Dependendo do case que entre, cria um tipo de unidade diferente.*/
        -: 1171:  		case 1:
       18: 1172:   			if(OpcaoNivel==1){
        9: 1173:     			Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,300,60,0.15,1,1);
        -: 1174:   			}
       18: 1175:			if(OpcaoNivel == 2){
        5: 1176:			    Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,400,60,0.15,2,1);    
        -: 1177:			}
       18: 1178:			if(OpcaoNivel == 3){
        4: 1179:			    Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,500,60,0.15,3,1);    
        -: 1180:			}
       18: 1181:   			break;
        -: 1182:
        -: 1183:  		case 2:
       14: 1184:   			if(OpcaoNivel == 1){
        5: 1185:     			Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,280,70,0.15,1,2);    
        -: 1186:   			}
       14: 1187:   			if(OpcaoNivel == 2){
        4: 1188:     			Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,280,90,0.15,2,2);    
        -: 1189:   			}
       14: 1190:   			if(OpcaoNivel == 3){
        5: 1191:     			Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,280,120,0.15,3,2);    
        -: 1192:    			}
       14: 1193:   			break;
        -: 1194:
        -: 1195:  		case 3:
       12: 1196:   			if(OpcaoNivel == 1){
        4: 1197:     			Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,280,60,0.2,1,3);    
        -: 1198:   			}
       12: 1199:   			if(OpcaoNivel == 2){
        2: 1200:     			Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,280,60,0.3,2,3);    
        -: 1201:   			}
       12: 1202:   			if(OpcaoNivel == 3){
        6: 1203:     			Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu,280,60,0.4,3,3);    
        -: 1204:   			}
       12: 1205:   			break;
        -: 1206:
        -: 1207:  		default:
    #####: 1208:  			MenuEscolhaUnidade(Interface);	/*Volta ao menu de escola*/
        -: 1209:	}
       44: 1210: }
        -: 1211:
        -: 1212:/****************************************************************************/
        -: 1213:/**
        -: 1214:* \fn InsereUnidadeBoss(CabecaGeral* Interface)
        -: 1215:*
        -: 1216:* \brief Realiza a inserção do personagem Boss na lista de personagens do cpu quando o player vencer as 10 hordas de inimigos.
        -: 1217:*
        -: 1218:* @param Interface - ponteiro para a controladora do game (CabecaGeral*)
        -: 1219:*
        -: 1220:* \return void - não possui retorno.
        -: 1221:* 
        -: 1222:* Assertiva de entrada
        -: 1223:*
        -: 1224:* A estrutura controladora do game precisa ter sido declarada e alocada.
        -: 1225:***************************************************************************/
        -: 1226:
        -: 1227:/*
        -: 1228:REQUISITO: Ponteiro de interface CabecaGeral deve estar alocado e inicializado.
        -: 1229:HIPÓTESE: A função deve inserir o chefão final na décima horda do jogo.
        -: 1230:ASSERTIVAS DE ENTRADA: Ponteiro de interface CabecaGeral deve estar alocado e inicializado.
        -: 1231:ASSERTIVAS DE SAÍDA: Não há.
        -: 1232:INTERFACE EXPLÍCITA: O tipo de retorno void e o parâmetro de entrada CabecaGeral* Interface.
        -: 1233:INTERFACE IMPLÍCITA: Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu, 1000,80,0.3,3,4);
        -: 1234:*/
        1: 1235: void InsereUnidadeBoss(CabecaGeral* Interface)
        -: 1236: {
        1: 1237:	 Interface->character->cpu = InserirUnidadeFinal(Interface->character->cpu, 1000,80,0.3,3,4);	/*Insere o chefe final*/
        1: 1238: }
        -: 1239:
        -: 1240:/*
        -: 1241:Função que que gera valores aleatórios entre 1 e 3.
        -: 1242:REQUISITO: Receber o valor de horda entre 1 e 10.
        -: 1243:HIPÓTESE: A função deve gerar valores aleatórios para nível das unidades inimigas.
        -: 1244:ASSERTIVAS DE ENTRADA: A variável horda precisa estar de acordo com o jogo, ou seja, estar entre 1 e 10.
        -: 1245:ASSERTIVAS DE SAÍDA: Dependendo do case que entre, retorna um valor diferente para o nivel.
        -: 1246:INTERFACE EXPLÍCITA: O tipo de retorno int e o parâmetro de entrada int horda.
        -: 1247:INTERFACE IMPLÍCITA: As estruturas e variáveis auxiliares, as assertivas de entrada e saída e as operações realizadas com os valores enviados como parâmetro.
        -: 1248:*/
        -: 1249:
        -: 1250:/****************************************************************************/
        -: 1251:/**
        -: 1252:* \fn int GerarNivel(int horda)
        -: 1253:*
        -: 1254:* \brief Função que verifica o nível do personagem a ser criado pela cpu, de acordo com a horda de inimigos do game.
        -: 1255:*
        -: 1256:* @param horda - valor inteiro que representa a horda de inimigos do jogo.
        -: 1257:*
        -: 1258:* \return Retorna um valor inteiro entre 1 e 3, indicando o nível do personagem a ser criado.
        -: 1259:* 
        -: 1260:* Assertiva de entrada
        -: 1261:*
        -: 1262:* A variável horda precisa estar de acordo com o jogo, ou seja, estar entre 1 e 10.
        -: 1263:***************************************************************************/
        -: 1264:
       44: 1265:int GerarNivel(int horda)
        -: 1266:{
       44: 1267:	if (horda>=1 && horda<10)	/*verifica a validade da informação*/
        -: 1268:	{
       44: 1269:		switch(horda){	/*Dependendo do case que entre, retorna um valor diferente para o nivel.*/
        -: 1270:			case 1:
        8: 1271:				return 1;
        -: 1272:			case 2:
        8: 1273:				return 1;
        -: 1274:			case 3:
        4: 1275:				return rand()%2+1;	/*gera valores aleatórios entre 1 e 2*/
        -: 1276:			case 4:
        4: 1277:				return 2;
        -: 1278:			case 5:
        4: 1279:				return rand()%2+2;	/*gera valores aleatórios entre 2 e 3*/
        -: 1280:			case 6:
        4: 1281:				return rand()%2+2;	/*gera valores aleatórios entre 2 e 3*/
        -: 1282:			case 7:
        4: 1283:				return 3;
        -: 1284:			case 8:
        4: 1285:				return 3;
        -: 1286:			case 9:
        4: 1287:				return 3;
        -: 1288:		}
        -: 1289:	}
    #####: 1290:	return 1;	/*Caso dê algum erro, retorna sempre 1.*/
        -: 1291:}
