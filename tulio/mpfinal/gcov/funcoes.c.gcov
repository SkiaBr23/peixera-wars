        -:    0:Source:funcoes.c
        -:    0:Programs:4
        -:    1:/*
        -:    2:PROJETO
        -:    3:Nome: MAXIMILLIAN FAN XAVIER, OTÁVIO ALVES DIAS, RAFAEL DIAS DA COSTA, TÚLIO ABNER DE LIMA
        -:    4:Matrícula: 12/0153271, 12/0131480, 12/0133253, 12/0137194
        -:    5:Curso: Engenharia de Computação
        -:    6:Disciplina: Métodos de Programação
        -:    7:Turma: A
        -:    8:Prof: Jan Mendonça
        -:    9:*/
        -:   10:
        -:   11:#include <stdio.h>
        -:   12:#include <stdlib.h>
        -:   13:#include <string.h>
        -:   14:#include <strings.h>
        -:   15:#include "estruturas.h"
        -:   16:#include "engine.h"
        -:   17:
        -:   18:/*	--------------------FUNÇÕES DE CRIAÇÃO--------------------	*/
        -:   19:/*
        -:   20:Função responsável para criação de estruturas do tipo CabecaGeral.
        -:   21:REQUISITO: Ter memória suficiente para alocação.
        -:   22:HIPOTESE: A função deve alocar e retornar um ponteiro do tipo CabecaGeral com ponteiros character=NULL e castle=NULL.
        -:   23:*/
        6:   24:CabecaGeral* CriaCabecaGeral () {
        6:   25:	CabecaGeral * novo = (CabecaGeral*) malloc (sizeof(CabecaGeral));
        6:   26:	novo->character = NULL;
        6:   27:	novo->castle = NULL;
        -:   28:
        6:   29:	if (novo != NULL) {	/*Verificação de retorno. Analisa se o espaço se memória foi alocado*/
        6:   30:		return novo;
        -:   31:	} else {
    #####:   32:		return NULL;
        -:   33:	}
        -:   34:}
        -:   35:
        -:   36:/*
        -:   37:Função responsável para criação de estruturas do tipo CabecaPFilas.
        -:   38:REQUISITO: Ter memória suficiente para alocação.
        -:   39:HIPOTESE: A função deve alocar e retornar um ponteiro do tipo CabecaPFilas com ponteiros player e cpu iguais a NULL.
        -:   40:*/
        4:   41:CabecaPFilas* CriaCabecaPFilas () {
        4:   42:	CabecaPFilas * novo = (CabecaPFilas*) malloc (sizeof(CabecaPFilas));
        4:   43:	novo->player = NULL;
        4:   44:	novo->cpu = NULL;
        -:   45:
        4:   46:	if (novo != NULL) {	/*Verificação de retorno. Analisa se o espaço se memória foi alocado*/
        4:   47:		return novo;
        -:   48:	} else {
    #####:   49:		return NULL;
        -:   50:	}
        -:   51:}
        -:   52:
        -:   53:/*
        -:   54:Função responsável para criação de estruturas do tipo Castelo.
        -:   55:REQUISITO: Ter memória suficiente para alocação.
        -:   56:HIPOTESE: A função deve alocar e retornar um ponteiro Castelo com ponteiros quartel,campodetiro,casadaslancas e comercio iguais a NULL. O atributo ouro deve ser incializado com 100.
        -:   57:*/
        4:   58:Castelo* CriaCastelo () {
        4:   59:	Castelo * novo = (Castelo*) malloc (sizeof(Castelo));
        4:   60:	novo->quartel = NULL;
        4:   61:	novo->campodetiro = NULL;
        4:   62:	novo->casadaslancas = NULL;
        4:   63:	novo->comercio = NULL;
        4:   64:	novo->ouro = 100;
        -:   65:
        4:   66:	if (novo != NULL) {	/*Verificação de retorno. Analisa se o espaço se memória foi alocado*/
        4:   67:		return novo;
        -:   68:	} else {
    #####:   69:		return NULL;
        -:   70:	}
        -:   71:}
        -:   72:
        -:   73:/*
        -:   74:Função responsável para criação de estruturas do tipo Unidade.
        -:   75:REQUISITO: Ter memória suficiente para alocação.
        -:   76:HIPOTESE: A função deve retornar um ponteiro de Unidade igual a NULL.
        -:   77:*/
        8:   78:Unidade* CriaUnidade () {
        8:   79:	return NULL;
        -:   80:}
        -:   81:
        -:   82:/*
        -:   83:Função responsável para criação de estruturas do tipo Edificio.
        -:   84:REQUISITO: Ter memória suficiente para alocação.
        -:   85:HIPOTESE: A função deve retornar um ponteiro de Edificio igual a NULL.
        -:   86:*/
       12:   87:Edificio* CriaEdificio () {
       12:   88:	return NULL;
        -:   89:}
        -:   90:
        -:   91:/*
        -:   92:Função responsável para criação de estruturas do tipo Comercio.
        -:   93:REQUISITO: Ter memória suficiente para alocação.
        -:   94:HIPOTESE: A função deve retornar um ponteiro Comercio igual a NULL.
        -:   95:*/
        4:   96:Comercio* CriaComercio () {
        4:   97:	return NULL;
        -:   98:}
        -:   99:
        -:  100:/*	--------------------FUNÇÕES QUE ANALISAM SE UMA LISTA ESTÁ VAZIA--------------------	*/
        -:  101:/*
        -:  102:Função que verifica se uma lista está vazia
        -:  103:REQUISITO: Ter um ponteiro de CabecaGeral alocado na memória.
        -:  104:HIPOTESE: A função deve retornar 1 caso o ponteiro seja igual a NULL(lista vazia) e 0 caso contrário(lista não vazia).
        -:  105:*/
       13:  106:int CabecaGeralVazia(CabecaGeral* lis){
       13:  107:	if(lis==NULL){	/*Se a lista for vazia, retorna 1, caso contrario, retorna 0*/
    #####:  108:		return 1;
        -:  109:	}else{
       13:  110:		return 0;
        -:  111:	}
        -:  112:}
        -:  113:/*
        -:  114:Função que verifica se uma lista está vazia.
        -:  115:REQUISITO: Ter um ponteiro de CabecaPFilas alocado na memória.
        -:  116:HIPOTESE: A função deve retornar 1 caso o ponteiro seja igual a NULL(lista vazia) e 0 caso contrário(lista não vazia).
        -:  117:*/
        4:  118:int CabecaPFilasVazia(CabecaPFilas* lis) {
        4:  119:	if(lis==NULL){	/*Se a lista for vazia, retorna 1, caso contrario, retorna 0*/
    #####:  120:		return 1;
        -:  121:	}else{
        4:  122:		return 0;
        -:  123:	}
        -:  124:}
        -:  125:/*
        -:  126:Função que verifica se uma lista está vazia.
        -:  127:REQUISITO: Ter um ponteiro de Castelo alocado na memória.
        -:  128:HIPOTESE: A função deve retornar 1 caso o ponteiro seja igual a NULL(lista vazia) e 0 caso contrário(lista não vazia).
        -:  129:*/
        4:  130:int CasteloVazia(Castelo* lis) {
        4:  131:	if(lis==NULL){	/*Se a lista for vazia, retorna 1, caso contrario, retorna 0*/
    #####:  132:		return 1;
        -:  133:	}else{
        4:  134:		return 0;
        -:  135:	}
        -:  136:}
        -:  137:/*
        -:  138:Função que verifica se uma lista está vazia.
        -:  139:REQUISITO: Ter um ponteiro de Unidade alocado na memória.
        -:  140:HIPOTESE: A função deve retornar 1 caso o ponteiro seja igual a NULL(lista vazia) e 0 caso contrário(lista não vazia).
        -:  141:*/
      696:  142:int UnidadeVazia(Unidade* lis) {
      696:  143:	if(lis==NULL){	/*Se a lista for vazia, retorna 1, caso contrario, retorna 0*/
       61:  144:		return 1;
        -:  145:	}else{
      635:  146:		return 0;
        -:  147:	}
        -:  148:}
        -:  149:/*
        -:  150:Função que verifica se uma lista está vazia.
        -:  151:REQUISITO: Ter um ponteiro de Comercio alocado na memória.
        -:  152:HIPOTESE: A função deve retornar 1 caso o ponteiro seja igual a NULL(lista vazia) e 0 caso contrário(lista não vazia).
        -:  153:*/
        8:  154:int ComercioVazia(Comercio* lis) {
        8:  155:	if(lis==NULL){	/*Se a lista for vazia, retorna 1, caso contrario, retorna 0*/
        4:  156:		return 1;
        -:  157:	}else{
        4:  158:		return 0;
        -:  159:	}
        -:  160:}
        -:  161:
        -:  162:/*
        -:  163:Função que verifica se uma lista está vazia.
        -:  164:REQUISITO: Ter um ponteiro de Edificio alocado na memória.
        -:  165:HIPOTESE: A função deve retornar 1 caso o ponteiro seja igual a NULL(lista vazia) e 0 caso contrário(lista não vazia).
        -:  166:*/
       24:  167:int EdificioVazia(Edificio* lis) {
       24:  168:	if(lis==NULL){	/*Se a lista for vazia, retorna 1, caso contrario, retorna 0*/
       12:  169:		return 1;
        -:  170:	}else{
       12:  171:		return 0;
        -:  172:	}
        -:  173:}
        -:  174:
        -:  175:/*	--------------------FUNÇÕES DE INSERÇÃO--------------------	*/
        -:  176:
        -:  177:/*
        -:  178:Função de inserção no fim da lista Unidade.
        -:  179:REQUISITOS: Ter um ponteiro de Unidade alocado e enviar informações positivas como argumento da função.
        -:  180:HIPÓTESES: A função deve inserir um novo nó no fim da lista de forma que o ponteiro de próximo seja igual a NULL e o ponteiro de anterior seja igual ao antigo nodo final.
        -:  181:*/
       97:  182:Unidade* InserirUnidadeFinal(Unidade* lis,int vida,int dano,float esquiva,int nivel,int classe){
       97:  183:	Unidade* novo = (Unidade*)malloc(sizeof(Unidade));
       97:  184:	Unidade* aux = lis;
        -:  185:	
       97:  186:	novo->vida = vida;	/*coloca as informações em uma celula auxiliar*/
       97:  187:	novo->dano = dano;
       97:  188:	novo->esquiva = esquiva;
       97:  189:	novo->nivel = nivel;
       97:  190:	novo->classe = classe;
       97:  191:	novo->prox = NULL;
        -:  192:	
       97:  193:	if((classe>=1 && classe<=4) && (vida>0) && (dano>0) && (esquiva>0 && esquiva<1) && ((nivel>0) && (nivel<=3))){	/*verifica a validade das informações enviadas*/
       97:  194:		if(!UnidadeVazia(lis)){	/*se a lista enviada não for nula, insere no fim*/
      210:  195:			while(aux->prox != NULL){/*enquanto o ponteiro de próximo em auxiliar não for nulo, continua com o laço. Objetivo: encontrar a última posição da lista*/
       68:  196:				aux = aux->prox;
        -:  197:			}
       71:  198:			aux->prox = novo;
       71:  199:			novo->ant = aux;
        -:  200:
       71:  201:			return lis;
        -:  202:		} else{	/*se a lista enviada for nula, retorna a célula auxiliar*/
       26:  203:			novo->ant = NULL;
       26:  204:			return novo;
        -:  205:		}
        -:  206:	}else{	/*se alguma informação enviada for inválida, retorna a lista sem fazer alterações*/
    #####:  207:		return lis;
        -:  208:	}
        -:  209:}
        -:  210:
        -:  211:/*	--------------------FUNÇÕES DE REMOÇÃO--------------------	*/
        -:  212:
        -:  213:/*
        -:  214:REQUISITOS: Enviar um ponteiro de Unidade alocado em memória.
        -:  215:HIPÓTESES: A função deve retirar um elemento de uma lista duplamente encadeada. Se a lista for nula, não realiza operação alguma. Se a lista contiver apenas um ou mais elementos, remove o nó final.
        -:  216:*/
        -:  217:
       64:  218:Unidade* RemoverUnidade(Unidade* lis, Unidade *retira)
        -:  219:{
       64:  220:Unidade* aux = NULL;
       64:  221:Unidade* p = lis;
        -:  222: 
      199:  223:	while(p!=retira && p != NULL)
        -:  224:	{
       71:  225:		aux = p;
       71:  226:	  	p = p->prox;
        -:  227:	}
       64:  228:	if(p==NULL)     /*se p é nulo, então a lista é vazia(apenas para certificar)*/
        -:  229:	{ 
    #####:  230:		return lis;
        -:  231:	}
        -:  232:	  
       64:  233:	if(aux==NULL){ /*se aux for nulo, significa que o elemento a ser removido é unico*/
       26:  234:		lis = p->prox; /*pega a segunda posição da lista(nula)*/
       26:  235:		if (p->prox!=NULL)
        -:  236:		   	{
       15:  237:		   		lis->ant = NULL;
        -:  238:		   	}
       26:  239:	   	free(p); /*libera a posição atual*/
       26:  240:	   	return lis;
        -:  241:	}
        -:  242:	else
        -:  243:	{
       38:  244:	   	aux->prox = p->prox; /*arruma o ponteiro da penúltima posição*/
       38:  245:	   	if (p->prox!=NULL)
        -:  246:	   	{
       11:  247:	   		p->prox->ant = aux;
        -:  248:	   	}
       38:  249:	   	free(p); /*libera o último espaço de memória*/
       38:  250:	   	return lis;
        -:  251:	}
        -:  252:}
        -:  253:
    #####:  254:Unidade* LimpaLista(Unidade* lis){
        -:  255:	Unidade* aux;
    #####:  256:	Unidade* p = lis;
    #####:  257:	while(p!=NULL)
        -:  258:	{
    #####:  259:		aux = p->prox;
    #####:  260:		free(p);
    #####:  261:		p=aux;
        -:  262:	}
    #####:  263:	return NULL;
        -:  264:}
        -:  265:
        -:  266:
        -:  267:
        -:  268:/*	--------------------FUNÇÕES DE INICIALIZAÇÃO--------------------	*/
        -:  269:
        -:  270:/*
        -:  271:Função de inicialização de Edificio.
        -:  272:REQUISITO: Enviar informações positivas.
        -:  273:HIPÓTESE: Caso o edificio não exista, a função deve alocar em memória um espaço e incializar os valores. Caso o edificio exista, os valores devem ser apenas atualizados.
        -:  274:*/
       12:  275:Edificio* InicializarEdificio(Edificio* E,int custounidade,int nivel){
        -:  276:	Edificio* novo;
       12:  277:	if(EdificioVazia(E)){	/*se edificio não existir, aloca um espaço de memória*/
       12:  278:		novo = (Edificio*)malloc(sizeof(Edificio));
        -:  279:	}else{
    #####:  280:		novo = E;
        -:  281:	}
        -:  282:	
       12:  283:	if((custounidade>0) && ((nivel>0) && (nivel<=3))){	/*verifica a validade das informações enviadas*/
       12:  284:		novo->custounidade = custounidade;
       12:  285:		novo->nivel = nivel;
        -:  286:		
       12:  287:		return novo;
        -:  288:	}else{
    #####:  289:		return novo;/*se alguma informação enviada for inválida, retorna o ponteiro sem fazer alterações*/
        -:  290:	}
        -:  291:}
        -:  292:
        -:  293:/*
        -:  294:Função de inicialização de Comercio.
        -:  295:REQUISITO: Enviar informações positivas.
        -:  296:HIPÓTESE: Caso o comercio não exista, a função deve alocar em memória um espaço e incializar os valores. Caso o comercio exista, os valores devem ser apenas atualizados.
        -:  297:*/
        4:  298:Comercio* InicializarComercio(Comercio* C,int taxaouro,int nivel){
        -:  299:	Comercio* novo;
        4:  300:	if(ComercioVazia(C)){	/*se comercio não existir, aloca um espaço de memória e atribui o tempo de geração de recursos*/
        4:  301:		novo = (Comercio*)malloc(sizeof(Comercio));
        -:  302:	}else{
    #####:  303:		novo = C;
        -:  304:	}
        -:  305:	
        4:  306:	if((taxaouro>0) && ((nivel>0) && (nivel<=3))){	/*verifica a validade das informações enviadas*/
        4:  307:		novo->taxaouro = taxaouro;
        4:  308:		novo->nivel = nivel;
        -:  309:		
        4:  310:		return novo;
        -:  311:	}else{
    #####:  312:		return novo;/*se alguma informação enviada for inválida, retorna o ponteiro sem fazer alterações*/
        -:  313:	}
        -:  314:}
        -:  315:
        -:  316:/*	--------------------FUNÇÕES DE VERIFICAÇÃO--------------------	*/
        -:  317:
        -:  318:/*
        -:  319:Função de verificação de Castelo.
        -:  320:REQUISITO: Enviar ponteiro de Castelo alocado.
        -:  321:HIPÓTESE: A função deve verificar os apontamentos de edificio e comercio em Castelo, certificando que sejam diferentes de nulo. Caso passe no teste, retorna 1, caso contrário, retorna 0.
        -:  322:*/
        4:  323:int VerificarCastelo(Castelo* C){
        4:  324:	if((!EdificioVazia(C->quartel)) && (!EdificioVazia(C->campodetiro)) && (!EdificioVazia(C->casadaslancas)) && (!ComercioVazia(C->comercio))){
        4:  325:		return 1;
        -:  326:	}else{
    #####:  327:		return 0;
        -:  328:	}
        -:  329:}
        -:  330:
        -:  331:/*
        -:  332:Função de verificação de CabecaGeral.
        -:  333:REQUISITO: Enviar ponteiro de CabecaGeral alocado.
        -:  334:HIPÓTESE: A função deve verificar os apontamentos de castle e character em CabecaGeral, certificando que sejam diferentes de nulo. Caso passe no teste, retorna 1, caso contrário, retorna 0.
        -:  335:*/
        4:  336:int VerificarCabecaGeral(CabecaGeral* CG){
        4:  337:	if((!CasteloVazia(CG->castle)) && (!CabecaPFilasVazia(CG->character))){
        4:  338:		return 1;
        -:  339:	}else{
    #####:  340:		return 0;
        -:  341:	}
        -:  342:}
        -:  343:
        -:  344:/*
        -:  345:Função de verificação para filas.
        -:  346:REQUISITO: Enviar ponteiro de Unidade alocado.
        -:  347:HIPÓTESE: A função deve verificar se os apontamentos de próximo e anterior das filas de Unidade estão feitos de forma correta.
        -:  348:*/
    #####:  349:int VerificaEstrutura (Unidade * lista) {
    #####:  350:	Unidade* t = NULL;
    #####:  351:	Unidade* q = NULL;
    #####:  352:	int v = 0;
        -:  353:
    #####:  354:	if(!UnidadeVazia(lista)){	/*Verifica se a lista está vazia*/
    #####:  355:		for (t = lista; t != NULL; t = t->prox) {	/*Estrutura de repetição contada para varrer o polinômio do começo até o fim*/
    #####:  356:			if (t->prox != NULL) {
    #####:  357:				if (t->prox->ant == t) {	/*Verifica se o prox->ant é igual a ele mesmo*/
    #####:  358:					v = 1;	/*Se for, a variável de retorno recebe 1*/
        -:  359:				}else{
    #####:  360:					v = 0;	/*Caso contrário, recebe 0*/
        -:  361:				}
        -:  362:			}
        -:  363:		}
        -:  364:
    #####:  365:		t = lista;
    #####:  366:		while(t->prox != NULL){/*Vai até o fim da fila*/
    #####:  367:			t = t->prox;
        -:  368:		}
        -:  369:
    #####:  370:		for(q = t; q != NULL; q = q->ant){	/*Estrutura de repetição contada para varrer o polinômio do final até o início*/
    #####:  371:			if(q->ant != NULL){
    #####:  372:				if(q->ant->prox == q){	/*Verifica se o ant->prox é igual a ele mesmo*/
    #####:  373:					v = 1;	/*Se for, a variável de retorno recebe 1*/
        -:  374:				}else{
    #####:  375:					v = 0;	/*Caso contrário, recebe 0*/
        -:  376:				}
        -:  377:			}
        -:  378:		}
        -:  379:	}else{
    #####:  380:		v = 0;
        -:  381:	}
        -:  382:	
    #####:  383:	return v;
        -:  384:}
        -:  385:
        -:  386:/*	--------------------FUNÇÕES DE ATUALIZAÇÃO--------------------	*/
        -:  387:
        -:  388:/*
        -:  389:Função de atualização do ouro do Castelo.
        -:  390:REQUISITO: Enviar ponteiro de Castelo alocado e valor de ouro maior ou igual a zero.
        -:  391:HIPÓTESE: A função deve atualizar os valores de ouro do Castelo.
        -:  392:*/
       48:  393:Castelo* AtualizarCasteloOuro(Castelo* C, int ouro){
        -:  394:	Castelo* novo;
       48:  395:	novo = C;
        -:  396:	/*verifica a validade das informações enviadas*/
       48:  397:	if ((novo->ouro + (ouro)) >= 0) {
       48:  398:		novo->ouro = novo->ouro + (ouro);
       48:  399:		return novo;
        -:  400:	} else {
    #####:  401:		return C;
        -:  402:	}
        -:  403:}
        -:  404:
       22:  405:Unidade * RemoverUnidadeFinal (Unidade * lis){
       22:  406:	Unidade* aux = NULL;
       22:  407:	Unidade* p = lis;
        -:  408:	
       22:  409:	if(!UnidadeVazia(lis)){	/*verifica se a lista tem elementos*/
       22:  410:		if(p==NULL){	/*se p é nulo, então a lista é vazia(apenas para certificar)*/
    #####:  411:			return lis;
        -:  412:		}
        -:  413:
       59:  414:		while(p->prox!=NULL){	/*vai até o final da lista*/
       15:  415:			aux = p;
       15:  416:			p = p->prox;
        -:  417:		}
        -:  418:		
       22:  419:		if(aux==NULL){	/*se aux for nulo, significa que o elemento a ser removido é unico*/
       10:  420:			lis = p->prox;	/*pega a segunda posição da lista(nula)*/
       10:  421:			free(p);	/*libera a posição atual*/
       10:  422:			return lis;
        -:  423:		} else {
       12:  424:			aux->prox = p->prox;	/*arruma o ponteiro da penúltima posição*/
       12:  425:			free(p);	/*libera o último espaço de memória*/
       12:  426:			return lis;
        -:  427:		}
        -:  428:	} else {
    #####:  429:		return NULL;
        -:  430:	}
        -:  431:}
